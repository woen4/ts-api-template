import type { Prisma, PrismaClient } from "@prisma/client";
import type { Except } from "type-fest";
import type { {{singularize (capitalize name)}} } from "~/domain/entities";
import type { ExtendedModel } from "~/infra/database/repositories/types";
import type { AsyncMaybe } from "~/core/types/maybe";

export type I{{pluralize (capitalize name)}}Repository = {{pluralize (capitalize name)}}Repository

export class {{pluralize (capitalize name)}}Repository {
	static usedAs = "{{pluralize (lowercase name)}}Repository";

	constructor(private readonly prisma: PrismaClient) {}

	create(data: {{singularize (capitalize name)}}) {
		return this.prisma.{{singularize (lowercase name)}}.create({ data });
	}

	update(params: {
		where: Prisma.{{singularize (capitalize name)}}WhereUniqueInput;
		data: Prisma.{{singularize (capitalize name)}}UpdateInput;
	}) {
		return this.prisma.{{singularize (lowercase name)}}.update(params);
	}

	delete(where: Prisma.{{singularize (capitalize name)}}WhereUniqueInput) {
		return this.prisma.{{singularize (lowercase name)}}.delete({ where });
	}

	async findMany(
		params?: Except<Prisma.{{singularize (capitalize name)}}FindManyArgs, "include" | "select" | "omit">,
	): Promise<{{singularize (capitalize name)}}[]> {
		const {{pluralize (lowercase name)}} = await this.prisma.{{singularize (lowercase name)}}.findMany(params);

		return {{pluralize (lowercase name)}}.map({{pluralize (capitalize name)}}Repository.toDomain)
	}

	async findUnique(where: Prisma.{{singularize (capitalize name)}}WhereUniqueInput): AsyncMaybe<{{singularize (capitalize name)}}> {
		const {{singularize (lowercase name)}} = await this.prisma.{{singularize (lowercase name)}}.findUnique({ where });

		if (!{{singularize (lowercase name)}}) return null;

		return {{pluralize (capitalize name)}}Repository.toDomain({{singularize (lowercase name)}})
	}

	static toDomain<Entity extends {{singularize (capitalize name)}}>(record: ExtendedModel<"{{singularize (lowercase name)}}">) {
		return record as Entity;
	}
}
